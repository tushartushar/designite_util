# This utility computes the 'diff' between two output folders generated by DesigniteJava.
import datetime
import json
import sys
import os
import time

from designiteutil.diff_arch import DiffArchDJ, DiffArchDpy
from designiteutil.diff_design import DiffDesignDJ, DiffDesignDpy
from designiteutil.diff_impl import DiffImplDJ, DiffImplDpy


def _verify(folder_path):
    path = os.path.abspath(folder_path)
    if os.path.exists(path):
        return path
    raise ValueError("The provided path does not exist: " + str(path))


def time_it(msg):
    print(str(datetime.datetime.now()) + ' - ' + msg)


def get_comparators(source_tool):
    if source_tool == 'dj':
        return DiffArchDJ(), DiffDesignDJ(), DiffImplDJ()
    else:
        return DiffArchDpy(), DiffDesignDpy(), DiffImplDpy()


def process(path1, path2, output_path='output.json', source_tool='dj'):
    """
    # Accepts two folder paths (assumes that both the folders are generated by DesigniteJava/Dpy)

    :param path1: folder path1 containing code quality analysis result
    :param path2: folder path2 containing code quality analysis result
    :param source_tool: the tool that has generated the output. either 'dj' or 'dpy'
    :return:
        # Returns 1: whether both the folders are same from detected smells perspective
        # 2 and 3: list of different arch smells in folder 1 and 2 respectively
        # 4 and 5: list of different design smells in folder 1 and 2 respectively
        # 6 and 7: list of different impl smells in folder 1 and 2 respectively
    """
    path1 = _verify(path1)
    path2 = _verify(path2)
    start_time = time.time()
    arch_comparator, design_comparator, impl_comparator = get_comparators(source_tool)
    is_same_arch, arch_new_smells, arch_removed_smells, arch_modified_smells = arch_comparator.diff(path1, path2)
    is_same_design, design_new_smells, design_removed_smells, design_modified_smells = design_comparator.diff(path1, path2)
    is_same_impl, impl_new_smells, impl_removed_smells, impl_modified_smells = impl_comparator.diff(path1, path2)
    is_same = is_same_arch and is_same_design and is_same_impl

    out_json = {}
    if not is_same:
        if not is_same_arch and len(arch_new_smells) > 0:
            out_json["architecture_smells"] = [str(arch_smell) for arch_smell in arch_new_smells]
        if not is_same_design and len(design_new_smells) > 0:
            out_json["design_smells"] = [str(design_smell) for design_smell in design_new_smells]
        if not is_same_impl and len(impl_new_smells) > 0:
            out_json["implementation_smells"] = [str(impl_smell) for impl_smell in impl_new_smells]

    with open(output_path, "+w") as fp:
        json.dump(out_json, fp)

    print('is_same: ' + str(is_same))
    print('Elapsed time: ' + str(time.time() - start_time))
    return is_same, arch_new_smells, arch_removed_smells, arch_modified_smells, design_new_smells, design_removed_smells, \
        design_modified_smells, impl_new_smells, impl_removed_smells, impl_modified_smells


if __name__ == '__main__':
    if len(sys.argv) > 3:
        if sys.argv[3] == 'dj' or sys.argv[3] == 'dpy':
            files = sys.argv[1:3]
            process(files[0], files[1], source_tool=sys.argv[3])
        else:
            print('Please indicate the correct tool name "dpy" or "dj"')
    else:
        print(
            'Argument error\nUsage:\ndesignite_diff <path of first output folder> <path of second output folder> <"dpy" or "dj", to indicate the tool that has generated the output; default is "dj">')
