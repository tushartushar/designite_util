Project Name,Package Name,Type Name,Method Name,Implementation Smell,Cause of the Smell,Method start line no
DJ,Designite.metrics,MethodMetrics,calculateCyclomaticComplexity,Long Statement,The length of the statement "return visitor.getNumOfIfStatements() + visitor.getNumOfSwitchCaseStatementsWitoutDefault() + visitor.getNumOfForStatements()+ visitor.getNumOfWhileStatements()+ visitor.getNumOfDoStatements()+ visitor.getNumOfForeachStatements()+ 1;" is 233.,43
DJ,Designite.metrics,PackageMetrics,extractMetrics,Magic Number,The method contains a magic number: 1000,24
DJ,Designite.metrics,TypeMetrics,computeLCOM,Long Identifier,The length of the identifier nonSingleElementFieldComponents is 31.,180
DJ,Designite,Designite,main,Missing default,The following switch statement is missing a default case: switch (argsObj.getProgramMode()) {,21
DJ,Designite,Designite,parseArguments,Empty catch clause,The method has an empty catch block.,66
DJ,Designite,Designite,parseArguments,Empty catch clause,The method has an empty catch block.,66
DJ,Designite,Designite,parseArguments,Empty catch clause,The method has an empty catch block.,66
DJ,Designite,Designite,parseArguments,Magic Number,The method contains a magic number: 2,66
DJ,Designite,Designite,populateInputArgs_IO,Magic Number,The method contains a magic number: 3,109
DJ,Designite,Designite,getLogFileName,Long Statement,The length of the statement "if (argsObj.getOutputFolder() != null) file=argsObj.getOutputFolder() + File.separator + "DesigniteLog"+ timeStamp+ ".txt";" is 123.,212
DJ,Designite,AnalyzeCI,execute,Long Statement,The length of the statement "String command="git clone https://" + inputArgs.getPAT() + "@github.com/"+ inputArgs.getRepoOwner()+ "/"+ inputArgs.getRepositoryName()+ " "+ foldername;" is 153.,20
DJ,Designite,AnalysisSummary,computeTotal,Long Statement,The length of the statement "TotalDesignSmells=UnnAbs + ImpAbs + DupAbs+ UnutAbs+ MulAbs+ FeaEvy+ UxpEnc+ DefEnc+ CycMod+ HubMod+ InsMod+ BroMod+ BroHie+ MisHie+ UnfHie+ RebHie+ CycHie+ DeeHie+ MulHie+ WidHie;" is 180.,87
DJ,Designite,AnalysisSummary,computeTotal,Magic Number,The method contains a magic number: 1000,87
DJ,Designite,AnalysisSummary,populateArchSmellsSummary,Complex Method,Cyclomatic complexity of the method is 10,100
DJ,Designite,AnalysisSummary,toString,Long Statement,The length of the statement "return "NoOfPackages=" + noOfPackages + "` NoOfClasses="+ noOfClasses+ "` NoOfMethods="+ noOfMethods+ "` LOC="+ totalLOC+ getArchSmellsSummary()+ getDesignSmellsSummary()+ getImplSmellsSummary();" is 195.,131
DJ,Designite,AnalysisSummary,getArchSmellsSummary,Long Statement,The length of the statement "return "` GodCom=" + GodCom + "` ScaFun="+ ScaFun+ "` UnsDep="+ UnsDep+ "` CycDep="+ CycDep+ "` FeaCon="+ FeaCon+ "` AmbInt="+ AmbInt+ "` DenStr="+ DenStr;" is 155.,138
DJ,Designite,AnalysisSummary,getImplSmellsSummary,Long Statement,The length of the statement "return "` AbsFunc=" + AbsFunc + "` ComCond="+ ComCond+ "` ComMeth="+ ComMeth+ "` LngIden="+ LngIden+ "` EmpCatc="+ EmpCatc+ "` LngMeth="+ LngMeth+ "` LngParm="+ LngParm+ "` LngStmt="+ LngStmt+ "` MgcNum="+ MgcNum+ "` MisDflt="+ MisDflt;" is 236.,143
DJ,Designite,AnalysisSummary,getDesignSmellsSummary,Long Statement,The length of the statement "return "` UnnAbs=" + UnnAbs + "` ImpAbs="+ ImpAbs+ "` DupAbs="+ DupAbs+ "` UnutAbs="+ UnutAbs+ "` MulAbs="+ MulAbs+ "` FeaEvy="+ FeaEvy+ "` UxpEnc="+ UxpEnc+ "` DefEnc="+ DefEnc+ "` CycMod="+ CycMod+ "` HubMod="+ HubMod+ "` InsMod="+ InsMod+ "` BroMod="+ BroMod+ "` BroHie="+ BroHie+ "` MisHie="+ MisHie+ "` UnfHie="+ UnfHie+ "` RebHie="+ RebHie+ "` CycHie="+ CycHie+ "` DeeHie="+ DeeHie+ "` MulHie="+ MulHie+ "` WidHie="+ WidHie;" is 430.,150
DJ,Designite,InputArgs,validateRepositoryString,Long Statement,The length of the statement "if (repoOwner.isEmpty() || repositoryName.isEmpty()) throw new IllegalArgumentException("Invalid repository argument: the expected format of repository argument is <repository_owner>/<repository_name>");" is 203.,57
DJ,Designite,InputArgs,validateRepositoryString,Long Statement,The length of the statement "else throw new IllegalArgumentException("Invalid repository argument: the expected format of repository argument is <repository_owner>/<repository_name>");" is 155.,57
DJ,Designite,InputArgs,validateRepositoryString,Magic Number,The method contains a magic number: 2,57
DJ,Designite,InputArgs,find,Empty catch clause,The method has an empty catch block.,161
DJ,Designite.smells.implementationSmells,ImplementationSmellDetector,hasComplexConditional,Long Statement,The length of the statement "ImplementationSmell smell=initializeCodeSmell(ImplSmellConstants.COMPLEX_CONDITIONAL`"The conditional expression " + ifStatement.getExpression().toString() + " is complex."`"CondCount=" + condCount);" is 199.,91
DJ,Designite.smells.implementationSmells,ImplementationSmellDetector,detectEmptyCatchBlock,Long Statement,The length of the statement "ImplementationSmell smell=initializeCodeSmell(ImplSmellConstants.EMPTY_CATCH_CLAUSE`"The method has an empty catch block."`"");" is 127.,135
DJ,Designite.smells.implementationSmells,ImplementationSmellDetector,hasLongParameter,Long Statement,The length of the statement "ImplementationSmell smell=initializeCodeSmell(ImplSmellConstants.LONG_IDENTIFIER`"The length of the parameter " + parameter.getName() + " is "+ parameter.getName().length()+ "."`"Length=" + parameter.getName().length());" is 220.,164
DJ,Designite.smells.implementationSmells,ImplementationSmellDetector,hasLongLocalVar,Long Statement,The length of the statement "ImplementationSmell smell=initializeCodeSmell(ImplSmellConstants.LONG_IDENTIFIER`"The length of the identifier " + var.getName() + " is "+ var.getName().length()+ "."`"Length=" + var.getName().length());" is 203.,177
DJ,Designite.smells.implementationSmells,ImplementationSmellDetector,hasLongFieldAccess,Long Statement,The length of the statement "ImplementationSmell smell=initializeCodeSmell(ImplSmellConstants.LONG_IDENTIFIER`"The length of the field " + field.getName() + " is "+ field.getName().length()+ "."`"Length=" + field.getName().length());" is 204.,190
DJ,Designite.smells.implementationSmells,ImplementationSmellDetector,hasLongMethod,Long Statement,The length of the statement "ImplementationSmell smell=initializeCodeSmell(ImplSmellConstants.LONG_METHOD`cause`"LOC=" + methodMetrics.getNumOfLines());" is 123.,211
DJ,Designite.smells.implementationSmells,ImplementationSmellDetector,hasLongParameterList,Long Statement,The length of the statement "ImplementationSmell smell=initializeCodeSmell(ImplSmellConstants.LONG_PARAMETER_LIST`cause`"PC=" + methodMetrics.getNumOfParameters());" is 135.,230
DJ,Designite.smells.implementationSmells,ImplementationSmellDetector,isNotZeroOrOne,Magic Number,The method contains a magic number: 16,308
DJ,Designite.smells.implementationSmells,ImplementationSmellDetector,switchIsMissingDefault,Long Statement,The length of the statement "if (flag) return "The following switch statement is missing a default case: " + switchStatement.toString().split("\n")[0];" is 122.,408
DJ,Designite.smells.implementationSmells,ImplementationSmellDetector,initializeCodeSmell,Long Statement,The length of the statement "return new ImplementationSmell(info.getProjectName()`info.getPackageName()`info.getTypeName()`info.getMethodName()`smellName`cause`telemetryLogText`info.getStart_line_no());" is 173.,425
DJ,Designite.smells.models,ArchitectureSmell,ArchitectureSmell,Long Parameter List,The method has 5 parameters. ,14
DJ,Designite.smells.models,ArchitectureSmell,ArchitectureSmell,Long Parameter List,The method has 5 parameters. ,26
DJ,Designite.smells.models,ImplementationSmell,ImplementationSmell,Long Parameter List,The method has 8 parameters. ,11
DJ,Designite.smells.models,ImplementationSmell,toString,Long Statement,The length of the statement "return getProjectName() + "`" + getPackageName()+ "`"+ typeName.replace('`'`'`')+ "`"+ methodName+ "`"+ smellName+ "`"+ cause.replace('`'`'`')+ "`"+ method_start_line_no+ "\n";" is 176.,42
DJ,Designite.smells.models,DesignSmell,DesignSmell,Long Parameter List,The method has 6 parameters. ,9
DJ,Designite.smells,ThresholdsDTO,getImperativeAbstractionLargeNumOfLines,Long Identifier,The length of the field imperativeAbstractionLargeNumOfLines is 36.,93
DJ,Designite.smells,ThresholdsDTO,setImperativeAbstractionLargeNumOfLines,Long Identifier,The length of the parameter imperativeAbstractionLargeNumOfLines is 36.,97
DJ,Designite.smells,ThresholdsDTO,setImperativeAbstractionLargeNumOfLines,Long Identifier,The length of the field imperativeAbstractionLargeNumOfLines is 36.,97
DJ,Designite.smells,ThresholdsDTO,getMultifacetedAbstractionLargeLCOM,Long Identifier,The length of the field multifacetedAbstractionLargeLCOM is 32.,101
DJ,Designite.smells,ThresholdsDTO,setMultifacetedAbstractionLargeLCOM,Long Identifier,The length of the parameter multifacetedAbstractionLargeLCOM is 32.,105
DJ,Designite.smells,ThresholdsDTO,setMultifacetedAbstractionLargeLCOM,Long Identifier,The length of the field multifacetedAbstractionLargeLCOM is 32.,105
DJ,Designite.smells,ThresholdsDTO,getMultifacetedAbstractionManyFields,Long Identifier,The length of the field multifacetedAbstractionManyFields is 33.,109
DJ,Designite.smells,ThresholdsDTO,setMultifacetedAbstractionManyFields,Long Identifier,The length of the parameter multifacetedAbstractionManyFields is 33.,113
DJ,Designite.smells,ThresholdsDTO,setMultifacetedAbstractionManyFields,Long Identifier,The length of the field multifacetedAbstractionManyFields is 33.,113
DJ,Designite.smells,ThresholdsDTO,getMultifacetedAbstractionManyMethods,Long Identifier,The length of the field multifacetedAbstractionManyMethods is 34.,117
DJ,Designite.smells,ThresholdsDTO,setMultifacetedAbstractionManyMethods,Long Identifier,The length of the parameter multifacetedAbstractionManyMethods is 34.,121
DJ,Designite.smells,ThresholdsDTO,setMultifacetedAbstractionManyMethods,Long Identifier,The length of the field multifacetedAbstractionManyMethods is 34.,121
DJ,Designite.smells,ThresholdsDTO,getUnnecessaryAbstractionFewFields,Long Identifier,The length of the field unnecessaryAbstractionFewFields is 31.,125
DJ,Designite.smells,ThresholdsDTO,setUnnecessaryAbstractionFewFields,Long Identifier,The length of the parameter unnecessaryAbstractionFewFields is 31.,129
DJ,Designite.smells,ThresholdsDTO,setUnnecessaryAbstractionFewFields,Long Identifier,The length of the field unnecessaryAbstractionFewFields is 31.,129
DJ,Designite.smells,ThresholdsDTO,getBrokenModularizationLargeFieldSet,Long Identifier,The length of the field brokenModularizationLargeFieldSet is 33.,149
DJ,Designite.smells,ThresholdsDTO,setBrokenModularizationLargeFieldSet,Long Identifier,The length of the parameter brokenModularizationLargeFieldSet is 33.,153
DJ,Designite.smells,ThresholdsDTO,setBrokenModularizationLargeFieldSet,Long Identifier,The length of the field brokenModularizationLargeFieldSet is 33.,153
DJ,Designite.smells,ThresholdsDTO,getHubLikeModularizationLargeFanIn,Long Identifier,The length of the field hubLikeModularizationLargeFanIn is 31.,157
DJ,Designite.smells,ThresholdsDTO,setHubLikeModularizationLargeFanIn,Long Identifier,The length of the parameter hubLikeModularizationLargeFanIn is 31.,161
DJ,Designite.smells,ThresholdsDTO,setHubLikeModularizationLargeFanIn,Long Identifier,The length of the field hubLikeModularizationLargeFanIn is 31.,161
DJ,Designite.smells,ThresholdsDTO,getHubLikeModularizationLargeFanOut,Long Identifier,The length of the field hubLikeModularizationLargeFanOut is 32.,165
DJ,Designite.smells,ThresholdsDTO,setHubLikeModularizationLargeFanOut,Long Identifier,The length of the parameter hubLikeModularizationLargeFanOut is 32.,169
DJ,Designite.smells,ThresholdsDTO,setHubLikeModularizationLargeFanOut,Long Identifier,The length of the field hubLikeModularizationLargeFanOut is 32.,169
DJ,Designite.smells,ThresholdsDTO,getInsufficientModularizationLargePublicInterface,Long Identifier,The length of the field insufficientModularizationLargePublicInterface is 46.,173
DJ,Designite.smells,ThresholdsDTO,setInsufficientModularizationLargePublicInterface,Long Identifier,The length of the parameter insufficientModularizationLargePublicInterface is 46.,177
DJ,Designite.smells,ThresholdsDTO,setInsufficientModularizationLargePublicInterface,Long Identifier,The length of the field insufficientModularizationLargePublicInterface is 46.,177
DJ,Designite.smells,ThresholdsDTO,getInsufficientModularizationLargeNumOfMethods,Long Identifier,The length of the field insufficientModularizationLargeNumOfMethods is 43.,181
DJ,Designite.smells,ThresholdsDTO,setInsufficientModularizationLargeNumOfMethods,Long Identifier,The length of the parameter insufficientModularizationLargeNumOfMethods is 43.,185
DJ,Designite.smells,ThresholdsDTO,setInsufficientModularizationLargeNumOfMethods,Long Identifier,The length of the field insufficientModularizationLargeNumOfMethods is 43.,185
DJ,Designite.smells,ThresholdsDTO,getInsufficientModularizationHighComplexity,Long Identifier,The length of the field insufficientModularizationHighComplexity is 40.,189
DJ,Designite.smells,ThresholdsDTO,setInsufficientModularizationHighComplexity,Long Identifier,The length of the parameter insufficientModularizationHighComplexity is 40.,193
DJ,Designite.smells,ThresholdsDTO,setInsufficientModularizationHighComplexity,Long Identifier,The length of the field insufficientModularizationHighComplexity is 40.,193
DJ,Designite.smells,ThresholdsDTO,getScatteredFunctionalityThreshold,Long Identifier,The length of the field scatteredFunctionalityMinPackageCountFromMethod is 47.,209
DJ,Designite.smells,ThresholdsDTO,getDenseStructureAverageDegreeThreshold,Long Identifier,The length of the field denseStructureAverageDegreeThreshold is 36.,213
DJ,Designite.smells.architectureSmells,ArchitectureSmellDetector,detectDenseStructure,Long Statement,The length of the statement "ArchitectureSmell smell=new ArchitectureSmell(curPackage.getParentProject().getName()`"<All packages>"`ArchSmellsConstants.A_DEN_STR`" The tool detected the smell because all the analyzed components exhibit excessive and dense dependencies among themselves. " + getFlatGraphString(averageDegree`graph)`"AvgDegree=" + averageDegree);" is 332.,42
DJ,Designite.smells.architectureSmells,ArchitectureSmellDetector,detectDenseStructure,Magic Number,The method contains a magic number: 2,42
DJ,Designite.smells.architectureSmells,ArchitectureSmellDetector,getFlatGraphString,Long Statement,The length of the statement "str.insert(0`"Average degree = " + Math.round(averageDegree * 100) / 100.0 + ". All the dependencies among components: ");" is 122.,65
DJ,Designite.smells.architectureSmells,ArchitectureSmellDetector,getFlatGraphString,Magic Number,The method contains a magic number: 100,65
DJ,Designite.smells.architectureSmells,ArchitectureSmellDetector,getFlatGraphString,Magic Number,The method contains a magic number: 100.0,65
DJ,Designite.smells.architectureSmells,ArchitectureSmellDetector,detectScatteredFunctionality,Long Statement,The length of the statement "ArchitectureSmell smell=new ArchitectureSmell(curPackage.getParentProject().getName()`curPackage.getName()`ArchSmellsConstants.A_SCA_FUN`"The tool detected the smell in this component because a set of two or more components " + "realizes the same high-level architectural concern. Following components realize the same concern: " + getFlatString(counter)`"Weight=" + counter.weight);" is 383.,90
DJ,Designite.smells.architectureSmells,ArchitectureSmellDetector,getUsedExternalNamespaces,Complex Conditional,The conditional expression calledMethod.getParentType().getName().toUpperCase().contains("UTIL") || calledMethod.getParentType().getName().toUpperCase().contains("HELPER") || calledMethod.getParentType().getName().toUpperCase().contains("UTIL")|| calledMethod.getParentType().getName().toUpperCase().contains("HELPER") is complex.,159
DJ,Designite.smells.architectureSmells,ArchitectureSmellDetector,getUsedExternalNamespaces,Long Statement,The length of the statement "if (calledMethod.getParentType().getName().toUpperCase().contains("UTIL") || calledMethod.getParentType().getName().toUpperCase().contains("HELPER") || calledMethod.getParentType().getName().toUpperCase().contains("UTIL")|| calledMethod.getParentType().getName().toUpperCase().contains("HELPER")) continue;" is 306.,159
DJ,Designite.smells.architectureSmells,ArchitectureSmellDetector,detectFeatureConcentration,Long Statement,The length of the statement "if (curPackage.getLCC() >= thresholds.getFeatureConcentrationLCC() && curPackage.getTypeList().size() > thresholds.getFeatureConcentrationMinTypes()) {" is 151.,182
DJ,Designite.smells.architectureSmells,ArchitectureSmellDetector,detectFeatureConcentration,Long Statement,The length of the statement "ArchitectureSmell smell=new ArchitectureSmell(curPackage.getParentProject().getName()`curPackage.getName()`ArchSmellsConstants.A_FEA_CON`"The tool detected the smell in this component because the component realizes more than one " + "architectural concern/feature. Independent sets of related classes within this component are: " + curPackage.getDisconnectedSubGraphComponents() + " LCC (Lack of Component Cohesion) = "+ curPackage.getLCC()`"LCC=" + curPackage.getLCC());" is 471.,182
DJ,Designite.smells.architectureSmells,ArchitectureSmellDetector,detectAmbiguousInterface,Long Statement,The length of the statement "ArchitectureSmell smell=new ArchitectureSmell(curPackage.getParentProject().getName()`curPackage.getName()`ArchSmellsConstants.A_AMB_INT`"The tool detected the smell in this component because the component provides only a single` " + "general entry-point via the following class: " + typeName.getName()`"");" is 307.,198
DJ,Designite.smells.architectureSmells,ArchitectureSmellDetector,detectUnstableDependency,Long Statement,The length of the statement "ArchitectureSmell smell=new ArchitectureSmell(curPackage.getParentProject().getName()`curPackage.getName()`ArchSmellsConstants.A_UNS_DEP`"The tool detected the smell in this component because this component depends on other components that are less stable than itself. " + "This component depends on following less stable component(s): " + getPackageNames(referencedPkgList)`"");" is 379.,227
DJ,Designite.smells.architectureSmells,ArchitectureSmellDetector,detectCyclicDependency,Complex Method,Cyclomatic complexity of the method is 10,251
DJ,Designite.smells.architectureSmells,ArchitectureSmellDetector,detectCyclicDependency,Long Statement,The length of the statement "ArchitectureSmell smell=new ArchitectureSmell(curPackage.getParentProject().getName()`curPackage.getName()`ArchSmellsConstants.A_CYC_MOD`"The tool detected the smell in this component because this component participates in a cyclic dependency. " + "The participating components in the cycle are: " + instances`"PkgCount=" + listPkg.size());" is 340.,251
DJ,Designite.smells.architectureSmells,ArchitectureSmellDetector,detectGodComponent,Long Statement,The length of the statement "ArchitectureSmell smell=new ArchitectureSmell(curPackage.getParentProject().getName()`curPackage.getName()`ArchSmellsConstants.A_GOD_COM`"The tool detected the smell in this component because the component contains high number of classes. " + "Number of classes in the component are: " + curPackage.getTypeList().size()`"NOT=" + curPackage.getTypeList().size());" is 362.,368
DJ,Designite.smells.architectureSmells,ArchitectureSmellDetector,detectGodComponent,Long Statement,The length of the statement "ArchitectureSmell smell=new ArchitectureSmell(curPackage.getParentProject().getName()`curPackage.getName()`ArchSmellsConstants.A_GOD_COM`"The tool detected the smell in this component because the component contains high number of LOC (Lines Of Code). " + "The total LOC of the component: " + curPackage.getLOC()`"LOC=" + curPackage.getLOC());" is 342.,368
DJ,Designite.smells.designSmells,DesignSmellDetector,initializeCodeSmell,Long Statement,The length of the statement "return new DesignSmell(getSourceItemInfo().getProjectName()`getSourceItemInfo().getPackageName()`getSourceItemInfo().getTypeName()`smellName`causeName`telemetryLogText);" is 169.,33
DJ,Designite.smells.designSmells,AbstractionSmellDetector,isFeatureEnvy,Complex Method,Cyclomatic complexity of the method is 9,50
DJ,Designite.smells.designSmells,AbstractionSmellDetector,isFeatureEnvy,Long Identifier,The length of the identifier differenceEnvyAccessSelfAccess is 30.,50
DJ,Designite.smells.designSmells,AbstractionSmellDetector,isFeatureEnvy,Long Identifier,The length of the identifier curDifferenceEnvyAccessSelfAccess is 33.,50
DJ,Designite.smells.designSmells,AbstractionSmellDetector,isFeatureEnvy,Long Statement,The length of the statement "String cause=DesignSmellConstants.GetSmellCauseDescription(DesignSmellCause.FEATURE_ENVY).replace("METHOD_NAME"`method.getName()) + (envyField.getType() == null ? "" : envyField.getType().getName());" is 199.,50
DJ,Designite.smells.designSmells,AbstractionSmellDetector,hasMultifacetedAbstraction,Complex Conditional,The conditional expression isLCOMHigher() && hasMinimumRequiredFields() && hasMinimulRequiredMethods() is complex.,165
DJ,Designite.smells.designSmells,AbstractionSmellDetector,hasMultifacetedAbstraction,Long Statement,The length of the statement "String cause=DesignSmellConstants.GetSmellCauseDescription(DesignSmellCause.LCOM) + Double.toString(getTypeMetrics().getLcom());" is 128.,165
DJ,Designite.smells.designSmells,AbstractionSmellDetector,hasMultifacetedAbstraction,Long Statement,The length of the statement "return initializeCodeSmell(MULTIFACETED_ABSTRACTION`cause`"LCOM=" + getTypeMetrics().getLcom() + "`NOF="+ getTypeMetrics().getNumOfFields()+ "`NOM="+ getTypeMetrics().getNumOfMethods());" is 186.,165
DJ,Designite.smells.designSmells,AbstractionSmellDetector,hasUnnecessaryAbstraction,Complex Conditional,The conditional expression getTypeMetrics().getNumOfMethods() == 0 && getTypeMetrics().getNumOfFields() <= getThresholdsDTO().getUnnecessaryAbstractionFewFields() && !getTypeMetrics().getType().isInterface() is complex.,196
DJ,Designite.smells.designSmells,AbstractionSmellDetector,hasUnnecessaryAbstraction,Long Statement,The length of the statement "if (getTypeMetrics().getNumOfMethods() == 0 && getTypeMetrics().getNumOfFields() <= getThresholdsDTO().getUnnecessaryAbstractionFewFields() && !getTypeMetrics().getType().isInterface()) {" is 187.,196
DJ,Designite.smells.designSmells,AbstractionSmellDetector,hasUnnecessaryAbstraction,Long Statement,The length of the statement "String cause=DesignSmellConstants.GetSmellCauseDescription(DesignSmellCause.FEW_DATA_FIELDS_ONLY) + StringUtils.convertFieldListToFlatString(getTypeMetrics().getType().getFieldList());" is 184.,196
DJ,Designite.smells.designSmells,AbstractionSmellDetector,isTestClass,Long Statement,The length of the statement "if (getTypeMetrics().getType().getName().toLowerCase().endsWith("test")) if (getTypeMetrics().getType().isTestFrameworkImported()) return true;" is 143.,239
DJ,Designite.smells.designSmells,HierarchySmellDetector,hasBrokenHierarchy,Long Statement,The length of the statement "return DesignSmellConstants.GetSmellCauseDescription(DesignSmellCause.BROKEN_HIE) + StringUtils.convertTypeListToFlatString(type.getSuperTypes());" is 146.,60
DJ,Designite.smells.designSmells,HierarchySmellDetector,methodIsOverriden,Complex Conditional,The conditional expression superMethod.getAccessModifier() == AccessStates.PUBLIC || superMethod.isAbstract() || superType.isInterface() is complex.,81
DJ,Designite.smells.designSmells,HierarchySmellDetector,hasCyclicDependency,Long Statement,The length of the statement "if (type.getName().equals(subType.getName()) && type.getParentPkg().getName().equals(subType.getParentPkg().getName())) return true;" is 132.,117
DJ,Designite.smells.designSmells,HierarchySmellDetector,hasDeepHierarchy,Long Statement,The length of the statement "return DesignSmellConstants.GetSmellCauseDescription(DesignSmellCause.DEPTH_OF_INHERITANCE) + getTypeMetrics().getInheritanceDepth();" is 133.,152
DJ,Designite.smells.designSmells,HierarchySmellDetector,hasMissingHierarchy,Long Identifier,The length of the field INSTANCE_OF_TYPES_NOT_IN_HIERARCHY_THRESHOLD is 44.,169
DJ,Designite.smells.designSmells,HierarchySmellDetector,hasMissingHierarchy,Long Statement,The length of the statement "return DesignSmellConstants.GetSmellCauseDescription(DesignSmellCause.MISSING_HIE) + StringUtils.convertTypeListToFlatString(setDifference(listOfInstanceOfTypes`allAncestors)) + " in method "+ method.getName();" is 210.,169
DJ,Designite.smells.designSmells,HierarchySmellDetector,hasWideHierarchy,Long Statement,The length of the statement "return DesignSmellConstants.GetSmellCauseDescription(DesignSmellCause.NO_OF_CHILDREN) + StringUtils.convertTypeListToFlatString(getTypeMetrics().getType().getSubTypes());" is 170.,337
DJ,Designite.smells.designSmells,EncapsulationSmellDetector,hasDeficientEncapsulation,Long Statement,The length of the statement "String cause=DesignSmellConstants.GetSmellCauseDescription(DesignSmellCause.PUBLIC_FIELDS) + StringUtils.convertFieldListToFlatString(getTypeMetrics().getType().getFieldList());" is 177.,43
DJ,Designite.smells.designSmells,EncapsulationSmellDetector,hasUnexploitedEncapsulation,Long Statement,The length of the statement "String cause=DesignSmellConstants.GetSmellCauseDescription(DesignSmellCause.UNEXPLOITED_ENC) + StringUtils.convertTypeListToFlatString(method.getSMTypesInInstanceOf()) + " in method "+ method.getName();" is 202.,61
DJ,Designite.smells.designSmells,EncapsulationSmellDetector,hasUnexploitedEncapsulation,Long Statement,The length of the statement "return initializeCodeSmell(UNEXPLOITED_ENCAPSULATION`cause`"CheckedTypeCount=" + method.getSMTypesInInstanceOf().size());" is 121.,61
DJ,Designite.smells.designSmells,ModularizationSmellDetector,hasBrokenModularization,Long Statement,The length of the statement "if (getTypeMetrics().getNumOfMethods() == 0 && getTypeMetrics().getNumOfFields() >= getThresholdsDTO().getBrokenModularizationLargeFieldSet()) {" is 144.,45
DJ,Designite.smells.designSmells,ModularizationSmellDetector,hasBrokenModularization,Long Statement,The length of the statement "return DesignSmellConstants.GetSmellCauseDescription(DesignSmellCause.ONLY_DATA_FIELDS) + StringUtils.convertFieldListToFlatString(getTypeMetrics().getType().getFieldList());" is 174.,45
DJ,Designite.smells.designSmells,ModularizationSmellDetector,detectCyclicDependentModularization,Long Identifier,The length of the field CYCLIC_DEPENDENT_MODULARIZATION is 31.,54
DJ,Designite.smells.designSmells,ModularizationSmellDetector,hasCyclicDependentModularization,Long Statement,The length of the statement "return DesignSmellConstants.GetSmellCauseDescription(DesignSmellCause.CYCLIC_DEPENDENCY) + StringUtils.convertTypeListToFlatString(getTypeList(dependencyGraph.getStrongComponentOfVertex(type)));" is 194.,64
DJ,Designite.smells.designSmells,ModularizationSmellDetector,detectInsufficientModularization,Long Statement,The length of the statement "cause=DesignSmellConstants.GetSmellCauseDescription(DesignSmellCause.BLOATED_INTERFACE) + getTypeMetrics().getNumOfPublicMethods() + " public methods";" is 151.,86
DJ,Designite.smells.designSmells,ModularizationSmellDetector,detectInsufficientModularization,Long Statement,The length of the statement "cause=DesignSmellConstants.GetSmellCauseDescription(DesignSmellCause.LARGE_METHOD_COUNT) + getTypeMetrics().getNumOfMethods() + " methods";" is 139.,86
DJ,Designite.smells.designSmells,ModularizationSmellDetector,detectInsufficientModularization,Long Statement,The length of the statement "cause=DesignSmellConstants.GetSmellCauseDescription(DesignSmellCause.HIGH_COMPLEXITY) + getTypeMetrics().getWeightedMethodsPerClass();" is 134.,86
DJ,Designite.smells.designSmells,ModularizationSmellDetector,hasLargePublicInterface,Long Statement,The length of the statement "return getTypeMetrics().getNumOfPublicMethods() >= getThresholdsDTO().getInsufficientModularizationLargePublicInterface();" is 122.,111
DJ,Designite.smells.designSmells,ModularizationSmellDetector,hasHighComplexity,Long Statement,The length of the statement "return getTypeMetrics().getWeightedMethodsPerClass() >= getThresholdsDTO().getInsufficientModularizationHighComplexity();" is 121.,121
DJ,Designite.smells.designSmells,ModularizationSmellDetector,detectHubLikeModularization,Long Statement,The length of the statement "addToSmells(initializeCodeSmell(HUB_LIKE_MODULARIZATION`cause`"Fanout=" + getTypeMetrics().getNumOfFanOutTypes() + "` Fanin="+ getTypeMetrics().getNumOfFanInTypes()));" is 167.,126
DJ,Designite.smells.designSmells,ModularizationSmellDetector,hasHubLikeModularization,Long Statement,The length of the statement "if (getTypeMetrics().getNumOfFanInTypes() >= getThresholdsDTO().getHubLikeModularizationLargeFanIn() && getTypeMetrics().getNumOfFanOutTypes() >= getThresholdsDTO().getHubLikeModularizationLargeFanOut()) {" is 205.,136
DJ,Designite.smells.designSmells,ModularizationSmellDetector,hasHubLikeModularization,Long Statement,The length of the statement "return DesignSmellConstants.GetSmellCauseDescription(DesignSmellCause.HIGH_FANIN_FANOUT) + "Incoming dependecies: " + StringUtils.convertTypeListToFlatString(getTypeMetrics().getType().getTypesThatReferenceThis())+ ". Outgoing dependencies: "+ StringUtils.convertTypeListToFlatString(getTypeMetrics().getType().getReferencedTypeList());" is 336.,136
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellDefinition,Complex Method,Cyclomatic complexity of the method is 21,30
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellDefinition,Long Statement,The length of the statement "return "This smell occurs when the declared accessibility of one or more members of an abstraction is more permissive than actually required.";" is 143.,30
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellDefinition,Long Statement,The length of the statement "return "This smell arises when data and/or methods that ideally should have been localized into a single abstraction are separated and spread across multiple abstractions.";" is 173.,30
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellDefinition,Long Statement,The length of the statement "return "This smell occurs when an abstraction which is actually not needed (and thus could have been avoided) gets introduced in a software design.";" is 149.,30
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellDefinition,Long Statement,The length of the statement "return "This smell arises when an abstraction exists that has not been completely decomposed and a further decomposition could reduce its size` implementation complexity` or both.";" is 181.,30
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellDefinition,Long Statement,The length of the statement "return "This smell arises when an inheritance hierarchy is \"too\" wide indicating that intermediate abstractions may be missing.";" is 131.,30
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellDefinition,Long Statement,The length of the statement "return "This smell arises when a subtype inherits both directly as well as indirectly from a supertype leading to unnecessary inheritance paths in the hierarchy.";" is 163.,30
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellDefinition,Long Statement,The length of the statement "return "This smell arises when an abstraction has dependencies (both incoming and outgoing) with a large number of other abstractions.";" is 136.,30
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellDefinition,Long Statement,The length of the statement "return "This smell arises when two or more abstractions depend on each other directly or indirectly (creating a tight coupling between the abstractions).";" is 155.,30
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellDefinition,Long Statement,The length of the statement "return "This smell arises when client code uses explicit type checks (using chained if-else or switch statements that check for the type of the object) instead of exploiting the variation in types already encapsulated within a hierarchy.";" is 239.,30
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellDefinition,Long Statement,The length of the statement "return "This smell arises when a code segment uses conditional logic (typically in conjunction with “tagged types”) to explicitly manage variation in behavior where a hierarchy could have been created and used to encapsulate those variations.";" is 244.,30
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellDefinition,Long Statement,The length of the statement "return "This smell arises when a supertype and its subtype conceptually do not share an \"IS-A\" relationship resulting in broken substitutability.";" is 149.,30
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellDefinition,Missing default,The following switch statement is missing a default case: switch (smellName) {,30
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Complex Method,Cyclomatic complexity of the method is 25,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class because the class exposes fields belonging to it with public accessibility. Following fields are declared with public accessiblity: ";" is 184.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class because it contains only data members without any method implementation. Following fields are declared in this class: ";" is 170.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class because the class contains only a few data members without any method implementation` that indicates that the abstraction might not be required. Following fields are declared in this class: ";" is 242.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class because the class contains large number of methods. Total methods in the class: ";" is 132.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class becuase the class has bloated interface (large number of public methods). Total public methods in the class: ";" is 161.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class because the class declares global (public static) fields. Following fields are declared with public static modifiers: ";" is 170.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class because the class is highly complex. The sum of cyclomatic complexity of all methods of this class (i.e. WMC) is: ";" is 166.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class because it looks like that an operation is turned into a class. This class contains only the following public method: ";" is 170.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class because the number of children for the class is large. This class has following sub-classes: ";" is 145.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class because the depth of inheritance for this class is more than recommended. The depth of inheritance for this class is: ";" is 170.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class because the cohesion among the methods of this class is low. LCOM of this class is: ";" is 136.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class because the class inherits another class directly as well as indirectly. The redundant inherited supertype is: ";" is 163.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class because the class depends on one of its subclasses (creating cycle in the hierarchy). The class is dependent on the following subclass: ";" is 188.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class because method(s) of this class reject the methods provided by its supertypes. The method(s) that reject the suptertype's method are: ";" is 186.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class because this class has high number of incoming as well as outgoing dependencies. ";" is 133.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class because this class participates in a cyclic dependency. The participating classes in the cycle are: ";" is 152.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class because this class is potentially unused. (Please ignore the smell if the reported class is auto-generated and/or used to serve a specific known purpose.)";" is 206.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class because two or more abstractions have identical names. The abstractions with identical names are: ";" is 150.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell in this class because a set of code clones has been found and at least one of the clones found in this class. List of code clones with start and end line numbers are: ";" is 205.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell because a set of code clones has been found where at least one pair of classes belong to the same inheritance hierarchy. List of classes with start and end line numbers where clones has been found are: ";" is 240.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell because a set of type checks are performed while those types belong to the same hierarchy. The participating types that were checked are: ";" is 176.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected the smell because a set of type checks are performed to explicitly manage variation in behavior where a hierarchy could have been formed consisting of these participating types. The participating types that were checked are: ";" is 253.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Long Statement,The length of the statement "return "The tool detected a potential instance of the smell because this type does not implement or override any method from it's supertype(s): ";" is 146.,77
DJ,Designite.smells.designSmells.constants,DesignSmellConstants,GetSmellCauseDescription,Missing default,The following switch statement is missing a default case: switch (dsCause) {,77
DJ,Designite.sourceModel,SourceItemInfo,SourceItemInfo,Long Parameter List,The method has 5 parameters. ,24
DJ,Designite.sourceModel,SM_Parameter,resolve,Long Statement,The length of the statement "typeInfo=resolver.resolveVariableType(variableDecl.getType()`parentMethod.getParentType().getParentPkg().getParentProject()`getParentType());" is 141.,44
DJ,Designite.sourceModel,Resolver,inferStaticAccess,Complex Method,Cyclomatic complexity of the method is 9,18
DJ,Designite.sourceModel,Resolver,inferCalledMethods,Complex Method,Cyclomatic complexity of the method is 13,49
DJ,Designite.sourceModel,Resolver,inferCalledMethods,Long Statement,The length of the statement "SM_Package sm_pkg=findPackage(imethod.getDeclaringClass().getPackage().getName().toString()`parentType.getParentPkg().getParentProject());" is 138.,49
DJ,Designite.sourceModel,Resolver,findMethod,Complex Method,Cyclomatic complexity of the method is 9,184
DJ,Designite.sourceModel,Resolver,inferPrimitiveType,Complex Conditional,The conditional expression iType != null && iType.isFromSource() && !iType.isWildcardType() && iType.getPackage() != null is complex.,326
DJ,Designite.sourceModel,SM_Project,isPresent,Complex Method,Cyclomatic complexity of the method is 9,278
DJ,Designite.sourceModel,SM_Project,printSummary,Long Statement,The length of the statement "System.out.println("\tCyclically-dependent modularization: " + summary.CycMod + "\tHub-like modularization: "+ summary.HubMod);" is 127.,321
DJ,Designite.sourceModel,SM_Project,printSummary,Long Statement,The length of the statement "System.out.println("\tAbstract function call from constructor: " + summary.AbsFunc + "\tComplex conditional: "+ summary.ComCond);" is 129.,321
DJ,Designite.sourceModel,SM_Project,exportAnalysisResult,Long Statement,The length of the statement "if (licenseType.equals(LicenseType.Trial) && summary.totalLOC > TRIAL_THRESHOLD) Logger.log("The trial version allows you to analyze an application lesser than " + TRIAL_THRESHOLD + " lines of code in size. The selected application has crossed the threshold` "+ "therefore the detailed results are disabled. \nPlease consider buying a Professional edition of the tool"+ " for unrestricted access to the functionality.");" is 420.,351
DJ,Designite.sourceModel,SM_Project,exportArchSmells,Long Statement,The length of the statement "else CSVUtils.addAllToCSVFile(inputArgs.getOutputFolder() + File.separator + Constants.ARCHITECTURE_SMELLS_PATH_SUFFIX`archSmellMapping.get(pkg));" is 146.,363
DJ,Designite.sourceModel,SM_Type,SM_Type,Long Parameter List,The method has 5 parameters. ,57
DJ,Designite.sourceModel,SM_Type,getMetricsAsARow,Long Statement,The length of the statement "return getParentPkg().getParentProject().getName() + "`" + getParentPkg().getName()+ "`"+ getName()+ "`"+ methodName+ "`"+ metrics.getNumOfLines()+ "`"+ metrics.getCyclomaticComplexity()+ "`"+ metrics.getNumOfParameters()+ "`"+ metrics.getStartLineNo()+ "\n";" is 259.,383
DJ,Designite.sourceModel,SM_Type,detectCodeSmells,Long Statement,The length of the statement "ImplementationSmellDetector detector=new ImplementationSmellDetector(metricsMapping.get(method)`new SourceItemInfo(getParentPkg().getParentProject().getName()`getParentPkg().getName()`getName()`method.getName()`method.getStartLineNo()));" is 237.,395
DJ,Designite.sourceModel,SM_Type,exportImplSmells,Long Statement,The length of the statement "else CSVUtils.addAllToCSVFile(inputArgs.getOutputFolder() + File.separator + Constants.IMPLEMENTATION_CODE_SMELLS_PATH_SUFFIX`smellMapping.get(method));" is 152.,407
DJ,Designite.sourceModel,SM_Type,sendImplSmellTelemetryRecord,Long Statement,The length of the statement "for ( ImplementationSmell smell : smellMapping.get(method)) Telemetry.sendSmellTelemetryRecord(smell`method.getParentType().getParentPkg());" is 140.,462
DJ,Designite.sourceModel,TypeInfo,removeLastComma,Magic Number,The method contains a magic number: 2,58
DJ,Designite.sourceModel,TypeInfo,removeLastComma,Magic Number,The method contains a magic number: 2,58
DJ,Designite.sourceModel,TypeInfo,toString,Long Statement,The length of the statement "return "TypeInfo [typeObj=" + typeObj + "` primitiveType="+ primitiveType+ "` objPrimitiveType="+ objPrimitiveType+ "` parametrizedType="+ parametrizedType+ "` nonPrimitiveTypeParameters="+ getStringOfNonPrimitiveParameters()+ "]";" is 231.,70
DJ,Designite.sourceModel,SM_Field,resolve,Long Statement,The length of the statement "typeInfo=resolver.resolveVariableType(fieldDeclaration.getType()`getParentType().getParentPkg().getParentProject()`getParentType());" is 132.,114
DJ,Designite.sourceModel,SM_Package,getMetricsAsARow,Long Statement,The length of the statement "return getParentProject().getName() + "`" + getName()+ "`"+ typeName+ "`"+ metrics.getNumOfFields()+ "`"+ metrics.getNumOfPublicFields()+ "`"+ metrics.getNumOfMethods()+ "`"+ metrics.getNumOfPublicMethods()+ "`"+ metrics.getNumOfLines()+ "`"+ metrics.getWeightedMethodsPerClass()+ "`"+ metrics.getNumOfChildren()+ "`"+ metrics.getInheritanceDepth()+ "`"+ metrics.getLcom()+ "`"+ metrics.getNumOfFanInTypes()+ "`"+ metrics.getNumOfFanOutTypes()+ "`"+ filePath+ "`"+ metrics.getStartLineNo()+ "\n";" is 496.,174
DJ,Designite.sourceModel,SM_Package,detectCodeSmells,Long Statement,The length of the statement "DesignSmellFacade detector=new DesignSmellFacade(metricsMapping.get(type)`new SourceItemInfo(getParentProject().getName()`getName()`type.getName()));" is 149.,194
DJ,Designite.sourceModel,SM_Package,exportDesignSmells,Long Statement,The length of the statement "else CSVUtils.addAllToCSVFile(inputArgs.getOutputFolder() + File.separator + Constants.DESIGN_CODE_SMELLS_PATH_SUFFIX`smellMapping.get(type));" is 142.,233
DJ,Designite.sourceModel,SM_Package,populateImplSmellsSummary,Complex Method,Cyclomatic complexity of the method is 13,253
DJ,Designite.sourceModel,SM_Package,populateDesignSmellsSummary,Complex Method,Cyclomatic complexity of the method is 22,292
DJ,Designite.sourceModel,SM_Package,getAssociatedPackages,Long Statement,The length of the statement "for ( SM_Type item : type.getReferencedTypeList()) if (!item.getParentPkg().getName().equals(name)) if (!associatedPackageList.contains(item.getParentPkg())) {" is 159.,386
DJ,Designite.sourceModel,SM_Package,get_Ce_outgoingDepListSize,Long Statement,The length of the statement "for ( SM_Type item : type.getReferencedTypeList()) if (!item.getParentPkg().getName().equals(name)) if (!ceOutgoingDepList.contains(item)) ceOutgoingDepList.add(item);" is 167.,408
DJ,Designite.sourceModel,SM_Package,get_Ca_incomingDepListSize,Long Statement,The length of the statement "for ( SM_Type item : type.getTypesThatReferenceThis()) if (!item.getParentPkg().getName().equals(name)) if (!caIncomingDepList.contains(item)) caIncomingDepList.add(item);" is 171.,421
DJ,Designite.sourceModel,SM_Package,computeLCC,Complex Method,Cyclomatic complexity of the method is 9,440
DJ,Designite.sourceModel,SM_Package,computeLCC,Magic Number,The method contains a magic number: 100,440
DJ,Designite.sourceModel,SM_Package,computeLCC,Magic Number,The method contains a magic number: 100,440
DJ,Designite.sourceModel,SM_Package,SetDisconnectedComponentsList,Long Identifier,The length of the field disconnectedSubGraphComponents is 30.,483
DJ,Designite.sourceModel,SM_Package,MergeLists,Complex Method,Cyclomatic complexity of the method is 8,504
DJ,Designite.sourceModel,SM_Package,getDisconnectedSubGraphComponents,Long Identifier,The length of the field disconnectedSubGraphComponents is 30.,549
DJ,Designite.sourceModel,SM_LocalVar,resolve,Long Statement,The length of the statement "typeInfo=resolver.resolveVariableType(localVarDecl.getType()`parentMethod.getParentType().getParentPkg().getParentProject()`getParentType());" is 141.,51
DJ,Designite.sourceModel,SM_LocalVar,toString,Long Statement,The length of the statement "return "Local variable name=" + name + "` type="+ localVarDecl.getType()+ "` isParameterizedType="+ localVarDecl.getType().isParameterizedType();" is 145.,57
DJ,Designite.sourceModel,SM_Method,setReferencedTypes,Complex Method,Cyclomatic complexity of the method is 8,260
DJ,Designite.sourceModel,SM_Method,setDirectFieldAccesses,Complex Method,Cyclomatic complexity of the method is 8,281
DJ,Designite.sourceModel,SM_Method,addToFieldAccessWithoutMemberAccess,Long Identifier,The length of the field accessedFieldListWithoutMemberAccess is 36.,304
DJ,Designite.utils,XMLExporter,exportMethodMetrics,Long Statement,The length of the statement "methodMetricElement.setAttribute(ExportConstants.TAG_COMPONENT`metrics.getMethod().getParentType().getParentPkg().getName());" is 125.,123
DJ,Designite.utils,CSVUtils,initializeNeededFiles,Long Statement,The length of the statement "createCSVFile(dir.getPath() + File.separator + Constants.IMPLEMENTATION_CODE_SMELLS_PATH_SUFFIX`Constants.IMPLEMENTATION_SMELLS_HEADER);" is 136.,41
DJ,Designite.utils,FileUtils,getCurrentFolder,Empty catch clause,The method has an empty catch block.,11
DJ,Designite.utils,Logger,writeToLogFile,Long Statement,The length of the statement "try (Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(logFile`true)`StandardCharsets.UTF_8))){" is 122.,31
DJ,Designite.utils,Telemetry,send,Magic Number,The method contains a magic number: 200,28
DJ,Designite.utils,Telemetry,sendSmellTelemetryRecord,Long Statement,The length of the statement "String id=convertToNumber(pkg.getParentProject().getName()) + convertToNumber(smellItem.getPackageName()) + convertToNumber(smellItem.getTypeName())+ convertToNumber(smellItem.getMethodName());" is 193.,74
DJ,Designite.utils,Telemetry,sendSmellTelemetryRecord,Long Statement,The length of the statement "String id=convertToNumber(smellItem.getProjectName()) + convertToNumber(smellItem.getPackageName()) + convertToNumber(smellItem.getTypeName());" is 143.,84
DJ,Designite.utils,Config,findConfigElement,Magic Number,The method contains a magic number: 2,68
DJ,Designite.utils.models,Graph,straightPassDFS,Long Identifier,The length of the field stronglyConnectedComponnentsMapping is 35.,47
DJ,Designite.utils.models,Graph,getStrongComponentOfVertex,Long Identifier,The length of the field stronglyConnectedComponnentsMapping is 35.,162
DJ,Designite.licensing,License,register,Long Statement,The length of the statement "Logger.log("Error - License registration unsuccessful. It seems the license key has been already registered."`TelemetryMsgType.Info);" is 133.,23
DJ,Designite.licensing,License,register,Long Statement,The length of the statement "Logger.log("Error - License registration unsuccessful. Please use a valid license key (bad request)."`TelemetryMsgType.Info);" is 125.,23
DJ,Designite.licensing,License,register,Long Statement,The length of the statement "Logger.log("Error - License registration unsuccessful. Status code: " + response.getStatusLine().getStatusCode()`TelemetryMsgType.Info);" is 136.,23
DJ,Designite.licensing,License,register,Magic Number,The method contains a magic number: 201,23
DJ,Designite.licensing,License,register,Magic Number,The method contains a magic number: 409,23
DJ,Designite.licensing,License,register,Magic Number,The method contains a magic number: 404,23
DJ,Designite.licensing,License,register,Magic Number,The method contains a magic number: 400,23
DJ,Designite.licensing,License,validate,Long Statement,The length of the statement "Logger.log("Error - License validation unsuccessful. Status code: " + response.getStatusLine().getStatusCode()`TelemetryMsgType.Info);" is 134.,69
DJ,Designite.licensing,License,validate,Magic Number,The method contains a magic number: 202,69
DJ,Designite.licensing,License,registerCI,Long Statement,The length of the statement "Logger.log("Error - License registration unsuccessful. Please use a valid license key (bad request)."`TelemetryMsgType.Info);" is 125.,107
DJ,Designite.licensing,License,registerCI,Long Statement,The length of the statement "Logger.log("Error - License registration unsuccessful. Status code: " + response.getStatusLine().getStatusCode()`TelemetryMsgType.Info);" is 136.,107
DJ,Designite.licensing,License,registerCI,Magic Number,The method contains a magic number: 201,107
DJ,Designite.licensing,License,registerCI,Magic Number,The method contains a magic number: 409,107
DJ,Designite.licensing,License,registerCI,Magic Number,The method contains a magic number: 404,107
DJ,Designite.licensing,License,registerCI,Magic Number,The method contains a magic number: 400,107
DJ,Designite.licensing,License,validateCI,Long Statement,The length of the statement "Logger.log("Error - License validation unsuccessful. Status code: " + response.getStatusLine().getStatusCode()`TelemetryMsgType.Info);" is 134.,166
DJ,Designite.licensing,License,validateCI,Magic Number,The method contains a magic number: 202,166
